[2021-08-08 11:05:34,251] {taskinstance.py:896} INFO - Dependencies all met for <TaskInstance: presentation_pipeline.create_presentation_table_dim_dates 2021-08-08T10:00:00+00:00 [queued]>
[2021-08-08 11:05:34,279] {taskinstance.py:896} INFO - Dependencies all met for <TaskInstance: presentation_pipeline.create_presentation_table_dim_dates 2021-08-08T10:00:00+00:00 [queued]>
[2021-08-08 11:05:34,280] {taskinstance.py:1087} INFO - 
--------------------------------------------------------------------------------
[2021-08-08 11:05:34,281] {taskinstance.py:1088} INFO - Starting attempt 1 of 1
[2021-08-08 11:05:34,281] {taskinstance.py:1089} INFO - 
--------------------------------------------------------------------------------
[2021-08-08 11:05:34,294] {taskinstance.py:1107} INFO - Executing <Task(MySqlOperator): create_presentation_table_dim_dates> on 2021-08-08T10:00:00+00:00
[2021-08-08 11:05:34,300] {standard_task_runner.py:52} INFO - Started process 388 to run task
[2021-08-08 11:05:34,312] {standard_task_runner.py:76} INFO - Running: ['***', 'tasks', 'run', 'presentation_pipeline', 'create_presentation_table_dim_dates', '2021-08-08T10:00:00+00:00', '--job-id', '23', '--pool', 'default_pool', '--raw', '--subdir', 'DAGS_FOLDER/presentation_pipeline.py', '--cfg-path', '/tmp/tmpov3pyc52', '--error-file', '/tmp/tmpyo2qb48t']
[2021-08-08 11:05:34,313] {standard_task_runner.py:77} INFO - Job 23: Subtask create_presentation_table_dim_dates
[2021-08-08 11:05:34,375] {logging_mixin.py:104} INFO - Running <TaskInstance: presentation_pipeline.create_presentation_table_dim_dates 2021-08-08T10:00:00+00:00 [running]> on host ce886ce1d63a
[2021-08-08 11:05:34,438] {taskinstance.py:1302} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=***
AIRFLOW_CTX_DAG_ID=presentation_pipeline
AIRFLOW_CTX_TASK_ID=create_presentation_table_dim_dates
AIRFLOW_CTX_EXECUTION_DATE=2021-08-08T10:00:00+00:00
AIRFLOW_CTX_DAG_RUN_ID=scheduled__2021-08-08T10:00:00+00:00
[2021-08-08 11:05:34,439] {mysql.py:70} INFO - Executing: CREATE TABLE IF NOT EXISTS presentation.dates (
    DATE_KEY INT NOT NULL AUTO_INCREMENT,
    `DAY` INT NOT NULL,
    `MONTH` INT NOT NULL,
    `YEAR` INT NOT NULL,
    INGESTION_TIMESTAMP TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT `DATE_PK` PRIMARY KEY (DATE_KEY),
    CONSTRAINT `DATE_UNIQUE` UNIQUE KEY (`DAY`, `MONTH`, `YEAR`)
) AS

WITH order_dates AS (
	SELECT 
		ORDER_DATE as date
	FROM 
		standardized.orders
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		ORDER_DATE 
),

shipdate AS (
	SELECT 
		LINE_ITEM_SHIP_DATE as date
	FROM
		standardized.line_items
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		LINE_ITEM_SHIP_DATE 
),

commitdate AS (
	SELECT 
		LINE_ITEM_COMMIT_DATE as date
	FROM
		standardized.line_items
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		LINE_ITEM_COMMIT_DATE 
),

receiptdate AS (
	SELECT 
		LINE_ITEM_RECEIPT_DATE as date
	FROM
		standardized.line_items
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		LINE_ITEM_RECEIPT_DATE 
),

uniondate AS (
	SELECT * FROM order_dates
	UNION
	SELECT * FROM shipdate
	UNION
	SELECT * FROM commitdate
	UNION
	SELECT * FROM receiptdate
),

extracted_date AS (
	SELECT
		EXTRACT(DAY FROM `date`) AS DAY,
		EXTRACT(WEEK FROM `date`) AS WEEK,
		EXTRACT(MONTH FROM `date`) AS MONTH,
		EXTRACT(QUARTER FROM `date`) AS QUARTER,
		EXTRACT(YEAR FROM `date`) AS YEAR,
	FROM 
		uniondate
)

SELECT
	NULL as DATE_KEY,
	`DAY`,
	`WEEK`,
	`MONTH`,
	`QUARTER`,
	`YEAR`,
	IF( `MONTH` >= 7 AND `MONTH` <= 12, `YEAR` + 1, `YEAR`) AS FISCAL_YEAR,
	NOW() AS INGESTION_TIMESTAMP
FROM 
	extracted_date

LIMIT 0
[2021-08-08 11:05:34,450] {base.py:78} INFO - Using connection to: id: dwh_id. Host: dwh, Port: 3306, Schema: , Login: root, Password: ***, extra: {}
[2021-08-08 11:05:34,462] {dbapi.py:204} INFO - Running statement: CREATE TABLE IF NOT EXISTS presentation.dates (
    DATE_KEY INT NOT NULL AUTO_INCREMENT,
    `DAY` INT NOT NULL,
    `MONTH` INT NOT NULL,
    `YEAR` INT NOT NULL,
    INGESTION_TIMESTAMP TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT `DATE_PK` PRIMARY KEY (DATE_KEY),
    CONSTRAINT `DATE_UNIQUE` UNIQUE KEY (`DAY`, `MONTH`, `YEAR`)
) AS

WITH order_dates AS (
	SELECT 
		ORDER_DATE as date
	FROM 
		standardized.orders
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		ORDER_DATE 
),

shipdate AS (
	SELECT 
		LINE_ITEM_SHIP_DATE as date
	FROM
		standardized.line_items
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		LINE_ITEM_SHIP_DATE 
),

commitdate AS (
	SELECT 
		LINE_ITEM_COMMIT_DATE as date
	FROM
		standardized.line_items
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		LINE_ITEM_COMMIT_DATE 
),

receiptdate AS (
	SELECT 
		LINE_ITEM_RECEIPT_DATE as date
	FROM
		standardized.line_items
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		LINE_ITEM_RECEIPT_DATE 
),

uniondate AS (
	SELECT * FROM order_dates
	UNION
	SELECT * FROM shipdate
	UNION
	SELECT * FROM commitdate
	UNION
	SELECT * FROM receiptdate
),

extracted_date AS (
	SELECT
		EXTRACT(DAY FROM `date`) AS DAY,
		EXTRACT(WEEK FROM `date`) AS WEEK,
		EXTRACT(MONTH FROM `date`) AS MONTH,
		EXTRACT(QUARTER FROM `date`) AS QUARTER,
		EXTRACT(YEAR FROM `date`) AS YEAR,
	FROM 
		uniondate
)

SELECT
	NULL as DATE_KEY,
	`DAY`,
	`WEEK`,
	`MONTH`,
	`QUARTER`,
	`YEAR`,
	IF( `MONTH` >= 7 AND `MONTH` <= 12, `YEAR` + 1, `YEAR`) AS FISCAL_YEAR,
	NOW() AS INGESTION_TIMESTAMP
FROM 
	extracted_date

LIMIT 0, parameters: None
[2021-08-08 11:05:34,464] {taskinstance.py:1501} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.6/site-packages/airflow/models/taskinstance.py", line 1157, in _run_raw_task
    self._prepare_and_execute_task_with_callbacks(context, task)
  File "/home/airflow/.local/lib/python3.6/site-packages/airflow/models/taskinstance.py", line 1331, in _prepare_and_execute_task_with_callbacks
    result = self._execute_task(context, task_copy)
  File "/home/airflow/.local/lib/python3.6/site-packages/airflow/models/taskinstance.py", line 1361, in _execute_task
    result = task_copy.execute(context=context)
  File "/home/airflow/.local/lib/python3.6/site-packages/airflow/providers/mysql/operators/mysql.py", line 72, in execute
    hook.run(self.sql, autocommit=self.autocommit, parameters=self.parameters)
  File "/home/airflow/.local/lib/python3.6/site-packages/airflow/hooks/dbapi.py", line 184, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.6/site-packages/airflow/hooks/dbapi.py", line 208, in _run_command
    cur.execute(sql_statement)
  File "/home/airflow/.local/lib/python3.6/site-packages/MySQLdb/cursors.py", line 206, in execute
    res = self._query(query)
  File "/home/airflow/.local/lib/python3.6/site-packages/MySQLdb/cursors.py", line 319, in _query
    db.query(q)
  File "/home/airflow/.local/lib/python3.6/site-packages/MySQLdb/connections.py", line 259, in query
    _mysql.connection.query(self, query)
MySQLdb._exceptions.ProgrammingError: (1064, "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM \n\t\tuniondate\n)\n\nSELECT\n\tNULL as DATE_KEY,\n\t`DAY`,\n\t`WEEK`,\n\t`MONTH`,\n\t`QUAR' at line 72")
[2021-08-08 11:05:34,467] {taskinstance.py:1551} INFO - Marking task as FAILED. dag_id=presentation_pipeline, task_id=create_presentation_table_dim_dates, execution_date=20210808T100000, start_date=20210808T110534, end_date=20210808T110534
[2021-08-08 11:05:34,524] {local_task_job.py:149} INFO - Task exited with return code 1
[2021-08-08 11:56:54,032] {taskinstance.py:896} INFO - Dependencies all met for <TaskInstance: presentation_pipeline.create_presentation_table_dim_dates 2021-08-08T10:00:00+00:00 [queued]>
[2021-08-08 11:56:54,048] {taskinstance.py:896} INFO - Dependencies all met for <TaskInstance: presentation_pipeline.create_presentation_table_dim_dates 2021-08-08T10:00:00+00:00 [queued]>
[2021-08-08 11:56:54,048] {taskinstance.py:1087} INFO - 
--------------------------------------------------------------------------------
[2021-08-08 11:56:54,049] {taskinstance.py:1088} INFO - Starting attempt 1 of 1
[2021-08-08 11:56:54,050] {taskinstance.py:1089} INFO - 
--------------------------------------------------------------------------------
[2021-08-08 11:56:54,065] {taskinstance.py:1107} INFO - Executing <Task(MySqlOperator): create_presentation_table_dim_dates> on 2021-08-08T10:00:00+00:00
[2021-08-08 11:56:54,076] {standard_task_runner.py:76} INFO - Running: ['***', 'tasks', 'run', 'presentation_pipeline', 'create_presentation_table_dim_dates', '2021-08-08T10:00:00+00:00', '--job-id', '21', '--pool', 'default_pool', '--raw', '--subdir', 'DAGS_FOLDER/presentation_pipeline.py', '--cfg-path', '/tmp/tmpctld5t7n', '--error-file', '/tmp/tmpjfk3hiz9']
[2021-08-08 11:56:54,077] {standard_task_runner.py:77} INFO - Job 21: Subtask create_presentation_table_dim_dates
[2021-08-08 11:56:54,072] {standard_task_runner.py:52} INFO - Started process 428 to run task
[2021-08-08 11:56:54,128] {logging_mixin.py:104} INFO - Running <TaskInstance: presentation_pipeline.create_presentation_table_dim_dates 2021-08-08T10:00:00+00:00 [running]> on host 7f57f947ae95
[2021-08-08 11:56:54,182] {taskinstance.py:1302} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=***
AIRFLOW_CTX_DAG_ID=presentation_pipeline
AIRFLOW_CTX_TASK_ID=create_presentation_table_dim_dates
AIRFLOW_CTX_EXECUTION_DATE=2021-08-08T10:00:00+00:00
AIRFLOW_CTX_DAG_RUN_ID=scheduled__2021-08-08T10:00:00+00:00
[2021-08-08 11:56:54,183] {mysql.py:70} INFO - Executing: CREATE TABLE IF NOT EXISTS presentation.dates (
    DATE_KEY INT NOT NULL AUTO_INCREMENT,
    `DAY` INT NOT NULL,
    `MONTH` INT NOT NULL,
    `YEAR` INT NOT NULL,
    INGESTION_TIMESTAMP TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT `DATE_PK` PRIMARY KEY (DATE_KEY),
    CONSTRAINT `DATE_UNIQUE` UNIQUE KEY (`DAY`, `MONTH`, `YEAR`)
) AS

WITH order_dates AS (
	SELECT 
		ORDER_DATE as date
	FROM 
		standardized.orders
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		ORDER_DATE 
),

shipdate AS (
	SELECT 
		LINE_ITEM_SHIP_DATE as date
	FROM
		standardized.line_items
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		LINE_ITEM_SHIP_DATE 
),

commitdate AS (
	SELECT 
		LINE_ITEM_COMMIT_DATE as date
	FROM
		standardized.line_items
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		LINE_ITEM_COMMIT_DATE 
),

receiptdate AS (
	SELECT 
		LINE_ITEM_RECEIPT_DATE as date
	FROM
		standardized.line_items
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		LINE_ITEM_RECEIPT_DATE 
),

uniondate AS (
	SELECT * FROM order_dates
	UNION
	SELECT * FROM shipdate
	UNION
	SELECT * FROM commitdate
	UNION
	SELECT * FROM receiptdate
),

extracted_date AS (
	SELECT
		EXTRACT(DAY FROM `date`) AS DAY,
		EXTRACT(WEEK FROM `date`) AS WEEK,
		EXTRACT(MONTH FROM `date`) AS MONTH,
		EXTRACT(QUARTER FROM `date`) AS QUARTER,
		EXTRACT(YEAR FROM `date`) AS YEAR
	FROM 
		uniondate
)

SELECT
	NULL as DATE_KEY,
	`DAY`,
	`WEEK`,
	`MONTH`,
	`QUARTER`,
	`YEAR`,
	IF( `MONTH` >= 7 AND `MONTH` <= 12, `YEAR` + 1, `YEAR`) AS FISCAL_YEAR,
	NOW() AS INGESTION_TIMESTAMP
FROM 
	extracted_date

LIMIT 0
[2021-08-08 11:56:54,193] {base.py:78} INFO - Using connection to: id: dwh_id. Host: dwh, Port: 3306, Schema: , Login: root, Password: ***, extra: {}
[2021-08-08 11:56:54,203] {dbapi.py:204} INFO - Running statement: CREATE TABLE IF NOT EXISTS presentation.dates (
    DATE_KEY INT NOT NULL AUTO_INCREMENT,
    `DAY` INT NOT NULL,
    `MONTH` INT NOT NULL,
    `YEAR` INT NOT NULL,
    INGESTION_TIMESTAMP TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT `DATE_PK` PRIMARY KEY (DATE_KEY),
    CONSTRAINT `DATE_UNIQUE` UNIQUE KEY (`DAY`, `MONTH`, `YEAR`)
) AS

WITH order_dates AS (
	SELECT 
		ORDER_DATE as date
	FROM 
		standardized.orders
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		ORDER_DATE 
),

shipdate AS (
	SELECT 
		LINE_ITEM_SHIP_DATE as date
	FROM
		standardized.line_items
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		LINE_ITEM_SHIP_DATE 
),

commitdate AS (
	SELECT 
		LINE_ITEM_COMMIT_DATE as date
	FROM
		standardized.line_items
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		LINE_ITEM_COMMIT_DATE 
),

receiptdate AS (
	SELECT 
		LINE_ITEM_RECEIPT_DATE as date
	FROM
		standardized.line_items
	WHERE 
		INGESTION_TIMESTAMP >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
	GROUP BY 
		LINE_ITEM_RECEIPT_DATE 
),

uniondate AS (
	SELECT * FROM order_dates
	UNION
	SELECT * FROM shipdate
	UNION
	SELECT * FROM commitdate
	UNION
	SELECT * FROM receiptdate
),

extracted_date AS (
	SELECT
		EXTRACT(DAY FROM `date`) AS DAY,
		EXTRACT(WEEK FROM `date`) AS WEEK,
		EXTRACT(MONTH FROM `date`) AS MONTH,
		EXTRACT(QUARTER FROM `date`) AS QUARTER,
		EXTRACT(YEAR FROM `date`) AS YEAR
	FROM 
		uniondate
)

SELECT
	NULL as DATE_KEY,
	`DAY`,
	`WEEK`,
	`MONTH`,
	`QUARTER`,
	`YEAR`,
	IF( `MONTH` >= 7 AND `MONTH` <= 12, `YEAR` + 1, `YEAR`) AS FISCAL_YEAR,
	NOW() AS INGESTION_TIMESTAMP
FROM 
	extracted_date

LIMIT 0, parameters: None
[2021-08-08 11:56:54,228] {dbapi.py:212} INFO - Rows affected: 0
[2021-08-08 11:56:54,241] {taskinstance.py:1211} INFO - Marking task as SUCCESS. dag_id=presentation_pipeline, task_id=create_presentation_table_dim_dates, execution_date=20210808T100000, start_date=20210808T115654, end_date=20210808T115654
[2021-08-08 11:56:54,272] {taskinstance.py:1265} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2021-08-08 11:56:54,295] {local_task_job.py:149} INFO - Task exited with return code 0
